
const { Telegraf } = require('telegraf');
const googleTTS = require('google-tts-api');
const fs = require('fs');
const axios = require('axios');

const bot = new Telegraf('7072083860:AAE1ZPxUstthNurbzm7a9weHzMjwO8EQvHM'); // ‡§ü‡•ã‡§ï‡§® ‡§ï‡•ã .env ‡§∏‡•á ‡§∏‡•á‡§´ ‡§≤‡•ã‡§° ‡§ï‡§∞‡•ã

// ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§ï‡•ã 200 ‡§ï‡•à‡§∞‡•á‡§ï‡•ç‡§ü‡§∞ ‡§ï‡•á ‡§™‡§æ‡§∞‡•ç‡§ü‡•ç‡§∏ ‡§Æ‡•á‡§Ç ‡§°‡§ø‡§µ‡§æ‡§á‡§° ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§´‡§Ç‡§ï‡•ç‡§∂‡§®
function splitText(text, maxLength = 200) {
    let result = [];
    while (text.length > 0) {
        result.push(text.substring(0, maxLength));
        text = text.substring(maxLength);
    }
    return result;
}

bot.start((ctx) => {
   const from = ctx.update.message.from
    console.log('from',from)
ctx.reply('üëã ‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•Å‡§ù‡•á ‡§ï‡•ã‡§à ‡§≠‡•Ä ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§≠‡•á‡§ú‡•ã, ‡§Æ‡•à‡§Ç ‡§â‡§∏‡•á ‡§ë‡§°‡§ø‡§Ø‡•ã ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤ ‡§¶‡•Ç‡§Å‡§ó‡§æ üé§üîä')
});


bot.on('text', async (ctx) => {
    const text = ctx.message.text;
    console.log(text);
    const lang = 'hi'; // ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è 'hi', ‡§á‡§Ç‡§ó‡•ç‡§≤‡§ø‡§∂ ‡§ï‡•á ‡§≤‡§ø‡§è 'en'

    try {
        // ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§ï‡•ã 200-200 ‡§ï‡•à‡§∞‡•á‡§ï‡•ç‡§ü‡§∞ ‡§ï‡•á ‡§õ‡•ã‡§ü‡•á ‡§π‡§ø‡§∏‡•ç‡§∏‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§§‡•ã‡§°‡§º‡•ã
        const textChunks = splitText(text);
        
        for (let i = 0; i < textChunks.length; i++) {
            const chunk = textChunks[i];

            // Google TTS ‡§∏‡•á ‡§ë‡§°‡§ø‡§Ø‡•ã ‡§≤‡§ø‡§Ç‡§ï ‡§≤‡•ã
            const url = googleTTS.getAudioUrl(chunk, {
                lang: lang,
                slow: false,
                host: 'https://translate.google.com',
            });

            // ‡§ë‡§°‡§ø‡§Ø‡•ã ‡§ï‡•ã ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡•ã
            const response = await axios({ url, responseType: 'stream' });
            const fileName = `audio_${Date.now()}_${i}.mp3`;
            const writer = fs.createWriteStream(fileName);

            response.data.pipe(writer);

            await new Promise((resolve) => writer.on('finish', resolve));

            console.log(`‚úÖ ‡§ë‡§°‡§ø‡§Ø‡•ã ‡§§‡•à‡§Ø‡§æ‡§∞: ${fileName}`);
            await ctx.replyWithAudio({ source: fileName });

            // ‡§ë‡§°‡§ø‡§Ø‡•ã ‡§≠‡•á‡§ú‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§´‡§æ‡§á‡§≤ ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§ï‡§∞ ‡§¶‡•ã
            fs.unlinkSync(fileName);
        }
    } catch (error) {
        console.error('‚ùå ‡§ë‡§°‡§ø‡§Ø‡•ã ‡§¨‡§®‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§¶‡§ø‡§ï‡•ç‡§ï‡§§:', error);
        ctx.reply('‚ö†Ô∏è ‡§ï‡•Å‡§õ ‡§ó‡§≤‡§§ ‡§π‡•ã ‡§ó‡§Ø‡§æ, ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç!');
    }
});

bot.launch();

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
